#LA FUERZA QUE EXPERIMENTAN DOS CARGAS MIENTRAS ESTAS VARIAN SU DISTANCIA.    #
#CARGA q1 Y q2, DISTANCIA r                                                   #
#                                                                             #
###############################################################################
####################COMPORTAMIENTO DETERMINISTA DEL FENOMENO###################
#ESTABLECIENDO PARAMETROS DEL COMPORTAMIENTO
#SON DOS CARGAS POSITIVAS
q1 = 4.3 #C
q2 = 5.2 #C
k = 8.98E9   #Nm^2/C^2
#DISTANCIA DE LAS CARGAS
r = seq(1,10.99,0.01)
#CALCULO DE LA FUERZA
Fx = (k*q1*q2)/(r*r)
plot(r,Fx,type="l",xlab="Distancia(r)",ylab="Fuerza(F)", main="Fuerza Electrica vs Distancia ",
cex.main=1.5,cex.lab=1.25,cex.axis=1.25)
####################COMPORTAMIENTO ALEATORIO DEL FENOMENO###################
####################LA CARGA SE COMPORTA COMO UNA NORMAL####################
#ESCENARIO DE SIMULACION
MEDIAq1 = q1
DESVIq1 = 0.85
n = 1000
#DATOS SIMULADOS DE LA VELOCIDAD: CASO NORMAL
q1Nrm = rnorm(n,mean=MEDIAq1,sd=DESVIq1)
FxNrm = (k*q1Nrm*q2)/(r*r)
plot(r,Fx,type="l",lty=1,lwd=4,col="black",ylim=c(0,max(FxNrm)*1.3),xlim=c(0,max(r)+1),
xlab="Distancia(r)",ylab="Fuerza(F)", main="Fuerza Electrica vs Distancia", cex.main=1.5,
cex.lab=1.25,cex.axis=1.25)
for(i in 1:n)
{
vy<-(k*q1Nrm[i]*q2)/(r*r)
points(r,vy,type="l",lty=3,lwd=0.5,col="lightsteelblue")
}
summary(q1Nrm)
sd(q1Nrm)
var(q1Nrm)
min(q1Nrm)
max(q1Nrm)
Carga = q1Nrm
hist(vy, freq = FALSE)
text(q1,0,"*",cex=2,col=2)
for(i in 1:n)
{
vx<-(k*q1Nrm[i]*q2)/(r[5]*r[5])
}
for(i in 1:n)
{
vx[i]<-(k*q1Nrm[i]*q2)/(r[5]*r[5])
}
hist(vx, freq = FALSE)
hist(vx, freq = FALSE, col = "Green")
for(i in 1:n)
{
Fuerza[i]<-(k*q1Nrm[i]*q2)/(r[5]*r[5])
}
summary(q1Nrm)
sd(q1Nrm)
var(q1Nrm)
min(q1Nrm)
max(q1Nrm)
Carga = q1Nrm
hist(Fuerza, freq = FALSE, col = "Green")
for(i in 1:n)
{
Fuerza[i]<-(k*q1Nrm[i]*q2)/(r[5]*r[5])
}
summary(q1Nrm)
sd(q1Nrm)
var(q1Nrm)
min(q1Nrm)
max(q1Nrm)
Carga = q1Nrm
hist(Fuerza, freq = FALSE, col = "Green")
for(i in 1:n)
{
Fuerza[i]<-(k*q1Nrm[i]*q2)/(r[5]*r[5])
}
Fuerza[i]
for(i in 1:n)
{
Fuerza<-(k*q1Nrm[i]*q2)/(r[5]*r[5])
}
for(i in 1:n)
{
Fuerza[i]<-(k*q1Nrm[i]*q2)/(r[5]*r[5])
}
summary(q1Nrm)
sd(q1Nrm)
var(q1Nrm)
min(q1Nrm)
max(q1Nrm)
Carga = q1Nrm
hist(Fuerza, freq = FALSE, col = "Green")
text(q1,0,"*",cex=2,col=2)
pnorm(0.05, mean = 0, sd = 1)
pnorm(0.95, mean = 0, sd = 1)
#Libreria a utilizar
library(ocedata)
#Base de datos
data(soi)
time = soi$year
x = soi$index
var(x)
plot(time, x, type = "l"  ,col = "deepskyblue")
#Calculo de EMV
n = length(x)
sumIx = sum(x)
#CASO NORMAL
mIx = sumIx/n
sdI2x = (1/n)*sum((x-mIx)**2)
sdIx = sdI2x**(1/2)
pnorm(0.01, mean = mIx, sd = sdIx)
help("pnorm")
valpha = 0.85
z = qnorm(1 - (valpha/2), 0, 1)
media = mean(x)
A = media - z*(sd(x)/sqrt(n))
B = media + z*(sd(x)/sqrt(n))
valpha = 0.95
z = qnorm(1 - (valpha/2), 0, 1)
media = mean(x)
A = media - z*(sd(x)/sqrt(n))
B = media + z*(sd(x)/sqrt(n))
valpha = 0.05
A
B
help(norm.test)
help("norm.test")
help("n.test")
help("t.test")
A = 9.8525 - z*(0.0965/sqrt(20))
B = 9.8525 + z*(0.0965/sqrt(20))
valpha = 0.05
z = qnorm(1 - (valpha/2), 0, 1)
A = 9.8525 - z*(0.0965/sqrt(20))
B = 9.8525 + z*(0.0965/sqrt(20))
valpha = 0.1
z = qnorm(1 - (valpha/2), 0, 1)
A = 5 - z*(0.05/sqrt(100))
B = 5 + z*(0.05/sqrt(100))
A = 7 - z*(2/sqrt(25))
B = 7 + z*(2/sqrt(25))
valpha = 0.15
z = qnorm(1 - (valpha/2), 0, 1)
A = 20 - z*(1/sqrt(81))
B = 20 + z*(1/sqrt(81))
valpha = 0.05
z = qnorm(1 - (valpha/2), 0, 1)
A = 15 - z*(0.001/sqrt(1000))
B = 15 + z*(0.001/sqrt(1000))
valpha = 0.25
z = qnorm(1 - (valpha/2), 0, 1)
A = 15 - z*(0.001/sqrt(1000))
B = 15 + z*(0.001/sqrt(1000))
valpha = 0.5
z = qnorm(1 - (valpha/2), 0, 1)
A = 15 - z*(0.001/sqrt(1000))
B = 15 + z*(0.001/sqrt(1000))
valpha = 0.95
z = qnorm(1 - (valpha/2), 0, 1)
A = 15 - z*(0.001/sqrt(1000))
B = 15 + z*(0.001/sqrt(1000))
valpha = 0.99
z = qnorm(1 - (valpha/2), 0, 1)
A = 15 - z*(0.001/sqrt(1000))
B = 15 + z*(0.001/sqrt(1000))
valpha = 0.05
z = qnorm(1 - (valpha/2), 0, 1)
A = 15 - z*(0.001/sqrt(1000))
B = 15 + z*(0.001/sqrt(1000))
valpha = 0.05
z = qnorm(1 - (valpha/2), 0, 1)
A = 15 - z*(0.001/sqrt(10))
B = 15 + z*(0.001/sqrt(10))
valpha = 0.1
z = qnorm(1 - (valpha/2), 0, 1)
A = 100 - z*(20/sqrt(64))
B = 100 + z*(20/sqrt(64))
T = sqrt(20)*(9.8525-10) / 0.0965
qt(alpha/2,20-1)
qt(1-alpha/2,20-1)
alpha = 0.05
qt(alpha/2,20-1)
qt(1-alpha/2,20-1)
#Libreria a utilizar
library(ocedata)
#Base de datos
data(soi)
time = soi$year
x = soi$index
#Calculo de EMV
n = length(x)
sumIx = sum(x)
#CASO NORMAL
mIx = sumIx/n
sdI2x = (1/(n-1))*sum((x-mIx)**2)
sdIx = sdI2x**(1/2)
mu0 = 0
x = soi$index
media=mean(x)
T = sqrt(n)*(media-mu0) / sdIx
alpha = 0.05
qt(alpha/2,n-1)
qt(1-alpha/2,n-1)
n
T = sqrt(n)*(media-mu0) / sdIx
T = sqrt(1000)*(0.05-0) / 3
qt(alpha/2,1000-1)
T = sqrt(10)*(0.053-0.05) / 0.003
qt(alpha/2,10-1)
T = sqrt(6)*(7750-8000) / 145
alpha = 0.05
qt(alpha/2,6-1)
T = sqrt(15)*(1.95-2) / 0.02
T = sqrt(15)*(1.95-2) / 0.02
T = sqrt(15)*(1.95-2) / 0.05
T = sqrt(15)*(1.95-2) / 0.02
T = sqrt(15)*(1.95-2) / 0.02
T = sqrt(15)*(1.95-2) / 0.2
T = sqrt(15)*(1.95-2) / 0.05
qt(alpha/2,15-1)
alpha = 0.01
qt(alpha/2,15-1)
version
install.packages(c("boot", "car", "cluster", "extRemes", "lattice", "lme4", "Matrix", "mgcv", "nlme", "nnet", "quantreg", "Rcpp", "RcppEigen", "SparseM", "survival"))
install.packages("ggplot2")
#SET PATH
path<- "C:/Users/Martin/Documents/Tareas UNISON/Termodinamica/Laboratorio/Informe 4/a/Datos"
setwd(path)
#Load Pakages
library("ggplot2")
library("reshape2")
library("dplyr")
#library("plotly")
#Lectura de datos
D <- read.csv("All.csv" ,header=TRUE, sep="," , stringsAsFactors=FALSE)
names(D)[names(D)=="Tiempo...s.."] <- "Tiempo"
names(D)[names(D)=="T...K.."] <- "T"
names(D)[names(D)=="V...m3.."] <- "V"
names(D)[names(D)=="P...kPa.."] <- "P"
#head(D,8)  #Ver los datos Si quieres
#str(D)     #Ver info de datos Si quieres
#summary(D) #Ver info de datos Si quieres
MT <- mean(D$T)
k<-ggplot(D, aes(x=Tiempo,y=T)) +
#theme_bw() +
geom_point(col="blue") +
geom_line(col="black")+
stat_smooth(method = "loess", span=0.1,colour="black")+
geom_hline(aes(yintercept = MT), linetype= "dashed", size =1.25)+
labs( x="Tiempo(s)", y="Temperatura (K)")
#ggplotly(k)
k
#Realizar LN(V/V0)
V_0 <- D$V[1]
VV <- D$V / V_0
lnV <- log(VV)
DN <- mutate(D, lnV= lnV)
#head(DN,5)
nR <- (D$V * D$P)/(D$T)
DN <- mutate(DN, PV/T=nR)
head(DN,5)
#Realizar LN(V/V0)
V_0 <- D$V[1]
VV <- D$V / V_0
lnV <- log(VV)
DN <- mutate(D, lnV= lnV)
#head(DN,5)
nR <- (D$V * D$P)/(D$T)
DN <- mutate(DN, PVT=nR)
head(DN,5)
#Grafica P vs LNV
p <- ggplot(DN,aes(x=P,y=lnV)) +
geom_point(size=0.75, color="dark blue") +
#geom_line(col= "blue", size=0.75)
stat_smooth(method = "loess",colour="black", size=0.25,
fullrange=TRUE, se=TRUE)+
labs(x="PresiÃ³n", y="Ln(V/V_0)")
#ggplotly(p)
p
